# Databricks notebook source
from pyspark.sql.types import StructType, StructField, StringType
import pyspark.sql.functions as F

# COMMAND ----------

schema_card = StructType([ StructField("card_string", StringType(), True), StructField("organization", StringType(), True), StructField("pan_token_number", StringType(), True), StructField("card_sequence_number", StringType(), True), StructField("account_number", StringType(), True), StructField("card_status", StringType(), True), StructField("logo", StringType(), True), StructField("source", StringType(), True), StructField("block_code", StringType(), True), StructField("warning_code_1", StringType(), True), StructField("warning_code_7", StringType(), True), StructField("reissue_attempts_sign", StringType(), True), StructField("reissue_attempts", StringType(), True), StructField("opened_date", StringType(), True), StructField("status_date", StringType(), True), StructField("secure_id_status", StringType(), True), StructField("last_maintenance_date", StringType(), True), StructField("last_maintenance_id", StringType(), True), StructField("block_date", StringType(), True), StructField("block_secure_id", StringType(), True), StructField("date_expire", StringType(), True), StructField("date_last_plastic_issue", StringType(), True), StructField("date_last_expire", StringType(), True), StructField("date_first_card_verify", StringType(), True), StructField("first_usage_flag", StringType(), True), StructField("embossed_name_1", StringType(), True), StructField("embossed_name_2", StringType(), True), StructField("user_1", StringType(), True), StructField("user_2", StringType(), True), StructField("user_3", StringType(), True), StructField("user_4", StringType(), True), StructField("user_5", StringType(), True), StructField("user_6", StringType(), True), StructField("user_7", StringType(), True), StructField("user_8", StringType(), True), StructField("user_date_1", StringType(), True), StructField("user_date_2", StringType(), True), StructField("card_type", StringType(), True), StructField("cardholder_flag", StringType(), True), StructField("number_of_cards_requested_sign", StringType(), True), StructField("number_requested", StringType(), True), StructField("cards_outstanding_sign", StringType(), True), StructField("number_of_cards_outstanding", StringType(), True), StructField("pin_offset_sign", StringType(), True), StructField("pin_offset", StringType(), True), StructField("last_card_action", StringType(), True), StructField("card_action", StringType(), True), StructField("number_of_invalid_pin_tries", StringType(), True), StructField("customer_number", StringType(), True), StructField("retail_frequency", StringType(), True), StructField("accumulated_atm_cash_authorizations_amount_today_sign", StringType(), True), StructField("atm_cash_amount", StringType(), True), StructField("atm_cash_number_sign", StringType(), True), StructField("atm_cash_number", StringType(), True), StructField("single_atm_cash_authorizations_amount_sign", StringType(), True), StructField("atm_cash_single_transaction", StringType(), True), StructField("accumulated_otc_cash_authorizations_amount_today_sign", StringType(), True), StructField("otc_cash_amount", StringType(), True), StructField("otc_cash_number_sign", StringType(), True), StructField("otc_cash_number", StringType(), True), StructField("single_otc_cash_authorizations_amount_sign", StringType(), True), StructField("otc_cash_single_transaction", StringType(), True), StructField("accumulated_retail_amount_today_sign", StringType(), True), StructField("retail_amount", StringType(), True), StructField("retail_number_sign", StringType(), True), StructField("retail_number", StringType(), True), StructField("single_retail_transaction_amount_sign", StringType(), True), StructField("retail_single_transaction", StringType(), True), StructField("accumulated_atm_cash_authorizations_amount_today_sign_2", StringType(), True), StructField("accumulated_atm_cash_authorizations_amount_today", StringType(), True), StructField("atm_cash_auth_sign", StringType(), True), StructField("accumulated_number_of_atm_cash_authorizations_today", StringType(), True), StructField("date_last_auth", StringType(), True), StructField("date_next_expire", StringType(), True), StructField("warning_code_1_date", StringType(), True), StructField("card_technology", StringType(), True), StructField("last_card_chip_sequence", StringType(), True), StructField("curr_chip_sequence", StringType(), True), StructField("prev_chip_sequence", StringType(), True), StructField("admin_branch", StringType(), True), StructField("first_issue_branch", StringType(), True), StructField("filler", StringType(), True), StructField("curr_card_from_date", StringType(), True), StructField("curr_card_mail_date", StringType(), True), StructField("transfer_account", StringType(), True), StructField("transfer_card_number", StringType(), True), StructField("transfer_effective_date", StringType(), True), StructField("name_1_type_indicator", StringType(), True), StructField("name_2_type_indicator", StringType(), True), StructField("mcc_table_oveeride_sign", StringType(), True), StructField("mcc_table_override", StringType(), True), StructField("mcc_override_start_date", StringType(), True), StructField("mcc_override_expire_date", StringType(), True), StructField("cardholder_type", StringType(), True), StructField("gender_code", StringType(), True), StructField("card_action_reason", StringType(), True), StructField("card_activated_date", StringType(), True), StructField("filler_2", StringType(), True), StructField("prior_first_usage_flag", StringType(), True), StructField("embosser_name_1", StringType(), True), StructField("embossername_2", StringType(), True), StructField("address_line_1", StringType(), True), StructField("address_line_2", StringType(), True), StructField("city", StringType(), True), StructField("state", StringType(), True), StructField("postal_code", StringType(), True), StructField("issue_delivery_option", StringType(), True), StructField("reissue_delivery_option", StringType(), True), StructField("language_code", StringType(), True), StructField("emblem_id", StringType(), True), StructField("pos_code", StringType(), True), StructField("invalid_pin_date_stamp", StringType(), True), StructField("digital_card_indicator", StringType(), True), StructField("filler_3", StringType(), True) ]) 

card_mapping = { "organization": (1,3), "pan_token_number": (4,19), "card_sequence_number": (23,4), "account_number": (27,19), "card_status": (46,1), "logo": (47,3), "source": (50,1), "block_code": (51,1), "warning_code_1": (52,1), "warning_code_7": (53,1), "reissue_attempts_sign": (54,1), "reissue_attempts": (55,3), "opened_date": (58,8), "status_date": (66,8), "secure_id_status": (74,3), "last_maintenance_date": (77,8), "last_maintenance_id": (85,3), "block_date": (88,8), "block_secure_id": (96,3), "date_expire": (99,8), "date_last_plastic_issue": (107,8), "date_last_expire": (115,8), "date_first_card_verify": (123,8), "first_usage_flag": (131,1), "embossed_name_1": (132,26), "embossed_name_2": (158,26), "user_1": (184,20), "user_2": (204,20), "user_3": (224,19), "user_4": (243,4), "user_5": (247,1), "user_6": (248,1), "user_7": (249,1), "user_8": (250,1), "user_date_1": (251,8), "user_date_2": (259,8), "card_type": (267,2), "cardholder_flag": (269,1), "number_of_cards_requested_sign": (270,1), "number_requested": (271,3), "cards_outstanding_sign": (274,1), "number_of_cards_outstanding": (275,3), "pin_offset_sign": (278,1), "pin_offset": (279,8), "last_card_action": (287,1), "card_action": (288,1), "number_of_invalid_pin_tries": (289,1), "customer_number": (290,19), "retail_frequency": (308,1), "accumulated_atm_cash_authorizations_amount_today_sign": (310,1), "atm_cash_amount": (311,17), "atm_cash_number_sign": (328,1), "atm_cash_number": (329,9), "single_atm_cash_authorizations_amount_sign": (338,1), "atm_cash_single_transaction": (339,17), "accumulated_otc_cash_authorizations_amount_today_sign": (356,1), "otc_cash_amount": (357,17), "otc_cash_number_sign": (374,1), "otc_cash_number": (375,9), "single_otc_cash_authorizations_amount_sign": (384,1), "otc_cash_single_transaction": (385,17), "accumulated_retail_amount_today_sign": (402,1), "retail_amount": (403,17), "retail_number_sign": (420,1), "retail_number": (421,9), "single_retail_transaction_amount_sign": (430,1), "retail_single_transaction": (431,17), "accumulated_atm_cash_authorizations_amount_today_sign_2": (448,1), "accumulated_atm_cash_authorizations_amount_today": (449,17), "atm_cash_auth_sign": (466,1), "accumulated_number_of_atm_cash_authorizations_today": (467,9), "date_last_auth": (476,8), "date_next_expire": (484,8), "warning_code_1_date": (492,8), "card_technology": (500,1), "last_card_chip_sequence": (501,2), "curr_chip_sequence": (503,2), "prev_chip_sequence": (505,2), "admin_branch": (507,9), "first_issue_branch": (516,9), "filler": (525,2), "curr_card_from_date": (527,8), "curr_card_mail_date": (535,8), "transfer_account": (543,19), "transfer_card_number": (562,19), "transfer_effective_date": (581,8), "name_1_type_indicator": (589,1), "name_2_type_indicator": (590,1), "mcc_table_oveeride_sign": (591,1), "mcc_table_override": (592,3), "mcc_override_start_date": (595,8), "mcc_override_expire_date": (603,8), "cardholder_type": (611,1), "gender_code": (612,1), "card_action_reason": (613,1), "card_activated_date": (614,8), "filler_2": (622,1), "prior_first_usage_flag": (623,1), "embosser_name_1": (624,40), "embossername_2": (664,40), "address_line_1": (704,40), "address_line_2": (744,40), "city": (784,30), "state": (814,3), "postal_code": (817,10), "issue_delivery_option": (827,3), "reissue_delivery_option": (830,3), "language_code": (833,3), "emblem_id": (836,5), "pos_code": (841,3), "invalid_pin_date_stamp": (844,8), "digital_card_indicator": (852,1), "filler_3": (853,198) }

# COMMAND ----------

card_df = spark.read.text("abfss://raw@stlakehyliaqas.dfs.core.windows.net/cms/reports/ZAMED001_2023-02-05").withColumn("value", F.decode('value', 'ISO-8859-1'))
card_df = card_df.withColumn("value", F.rtrim("value")) 
card_df = card_df.filter(F.length("value") > 100)

for f in card_mapping.keys(): 
    card_df = card_df.withColumn(f, F.substring('value', card_mapping[f][0], card_mapping[f][1])) 
card_df = card_df.drop("value")

# COMMAND ----------

card_df.display()

# COMMAND ----------

# DBTITLE 1,Reportar esto a Fiserv de repetirse: #´s de tarjeta vacíos
card_df.withColumn("pan_token_number", F.trim(F.col("pan_token_number"))).filter("pan_token_number = ''").count()

# COMMAND ----------

card_df.select("pan_token_number", "card_status", "date_expire", "customer_number", "card_technology").display()
